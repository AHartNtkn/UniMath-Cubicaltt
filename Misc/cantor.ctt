module cantor where

import nat
import bool

data empty =
neg (A : U) : U = A -> empty
data unit = tt

surj (A B : U) : U =
  (to : A -> B) *
  (from : B -> A) *
  (b : B) -> Id B (to (from b)) b

noFixPoint (A : U) (f : A -> A) : U =
  (a : A) -> neg (Id A (f a) a)

fixPoint (A : U) (f : A -> A) : U =
  (a : A) * Id A (f a) a

fxPtLem (T Y : U) (a : Y -> Y) (s : surj T (T -> Y)) : fixPoint Y a = (s.1 t t, <i> (s.2.2 g @ -i) t) where
  g (t : T) : Y = a (s.1 t t)
  t : T = s.2.1 g

fxPtThrm (T Y : U) (a : Y -> Y) (np : noFixPoint Y a) : neg (surj T (T -> Y))
  = \(sr : surj T (T -> Y)) -> np (fxPtLem T Y a sr).1 (fxPtLem T Y a sr).2

para (p : Id bool true false) : empty
  = transport (<i> P (p @ i)) tt where
  P : bool -> U = split
    false -> empty
    true  -> unit

nfnotb : noFixPoint bool negBool = split
  false -> \(tef : Id bool true false) -> para tef
  true  -> \(fet : Id bool false true) -> para (<i> fet @ -i)

cantorsTheorem : neg (surj nat (nat -> bool)) = fxPtThrm nat bool negBool nfnotb
